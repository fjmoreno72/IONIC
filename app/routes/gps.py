import logging
from flask import Blueprint, request, jsonify, current_app
from app.data_access import gps_repository

gps_bp = Blueprint('gps_bp', __name__, url_prefix='/api/gps')

# The _generate_gp_id function is no longer needed as the repository now handles ID generation

@gps_bp.route('', methods=['GET'])
def get_gps():
    """Endpoint to retrieve all GPs."""
    current_app.logger.info("API Route: /api/gps GET endpoint called.")
    try:
        gps_data = gps_repository.get_all_gps()
        current_app.logger.info(f"API Route: Retrieved {len(gps_data)} GPs from repository.")
        if not isinstance(gps_data, list):
             current_app.logger.warning(f"API Route: gps_data is not a list: {type(gps_data)}")
             return jsonify({"error": "Invalid data format received from repository"}), 500
        
        current_app.logger.info("API Route: Returning GP data successfully.")
        return jsonify(gps_data)
    except Exception as e:
        current_app.logger.error(f"API Route: Error in /api/gps GET endpoint: {e}", exc_info=True)
        return jsonify({"error": "Internal server error fetching GP data"}), 500

@gps_bp.route('', methods=['POST'])
def add_gp():
    """Endpoint to add a new GP."""
    current_app.logger.info("API Route: /api/gps POST endpoint called.")
    data = request.get_json()
    if not data or 'name' not in data:
        return jsonify({"error": "Missing 'name' in request data"}), 400

    # Create a new GP data object
    new_gp = {
        # ID will be generated by the repository
        "name": data['name'],
        "description": data.get("description", ""),
        "iconPath": data.get("iconPath", "")
        # Add other fields as necessary from the request
    }
    
    # Use repository create function
    result = gps_repository.create_gp(new_gp)
    
    if result:
        current_app.logger.info(f"API Route: Successfully added GP {result.get('id')}")
        return jsonify(result), 201
    else:
        current_app.logger.error("API Route: Failed to save new GP data.")
        return jsonify({"error": "Failed to save GP data"}), 500

@gps_bp.route('/<string:gp_id>', methods=['PUT'])
def update_gp(gp_id):
    """Endpoint to update an existing GP by ID."""
    current_app.logger.info(f"API Route: /api/gps PUT endpoint called for ID: {gp_id}")
    data = request.get_json()
    if not data:
        return jsonify({"error": "Missing request data"}), 400

    # Use repository update function
    result = gps_repository.update_gp(gp_id, data)
    
    if result:
        current_app.logger.info(f"API Route: Successfully updated GP {gp_id}")
        return jsonify(result)
    else:
        current_app.logger.error(f"API Route: Failed to update GP with ID: {gp_id}")
        return jsonify({"error": f"GP with ID '{gp_id}' not found or could not be updated"}), 404


@gps_bp.route('/<string:gp_id>', methods=['DELETE'])
def delete_gp(gp_id):
    """Endpoint to delete a GP by ID."""
    current_app.logger.info(f"API Route: /api/gps DELETE endpoint called for ID: {gp_id}")
    
    # Use repository delete function
    result = gps_repository.delete_gp(gp_id)
    
    if result:
        current_app.logger.info(f"API Route: Successfully deleted GP {gp_id}")
        return jsonify({"message": f"GP with ID '{gp_id}' deleted successfully"}), 200
    else:
        current_app.logger.error(f"API Route: Failed to delete GP with ID: {gp_id}")
        return jsonify({"error": f"GP with ID '{gp_id}' not found or could not be deleted"}), 404
